#######################################################################
#              vim-like tmux config for version >= 2.6                #
#######################################################################
# Features:
#   - sane defaults
#   - vim-like keybindings for all modes
#   - CLIPBOARD and PRIMARY interaction with xsel
#       - copy in copy-mode to CLIPBOARD with Shift-Y
#       - copy from chosen buffer with CTRL+y in prefix-mode
#   - powerline-like status line with mode indicators
#       - status indicators for PREFIX, SYNC, COPY, SELECT, ZOOM
#       - indicator for ssh and DISPLAY (shows whether xsel will work)
#
# TODO: possible future extensions
#   - layouts and layout widget (esp. layout: [ |-], [-| ])
#   - keybindings for resizing and organizing windows (maybe a window-mode?)
#   - add small pane-indicators to active window tab?
#   - MacOS clipboard access
#
# Notes:
#
#   Aliases
#       `bind` is an alias for `bind-key`
#             - this is due to lazy pretching
#             - therefore, any distinct prefix is a valid alias
#        Examples:
#             bind -> bind-key
#             send -> send-keys
#             set  -> set-option
#
#   Conditionals:
#       if var empty, {?var,<true>,<false>} will default to <true>


######################
#  General settings  #
######################

# increase history size
set-option -g history-limit 32768

# enable mouse
set -g mouse on # since v 2.1

# enable 256 colors
set -g default-terminal "screen-256color" 
#set -ga terminal-overrides ",*256col*:Tc"
set -g default-terminal "xterm-256color"
set -ga terminal-overrides ",*256col*:Tc"

# pass through control characters
set -g xterm-keys on

# don't wait after ESC (ie, leave vim insert/visual mode immediately)
set -g escape-time 0 # (http://superuser.com/a/252717/65504)

# show tmux messages for longer than half a second
set-option -g display-time 3000

# activate visual bell forwarding
set-option -g bell-action any

# watch for activity in background windows
setw -g monitor-activity on

# when windows are closd, renumber them
set -g renumber-windows on

# set aggressive resizing
setw -g aggressive-resize on

# Start numbering at 1
set -g base-index 1
set -g pane-base-index 1


#################
#  Keybindings  #
#################

# prefix key
set-option -g prefix C-a

# nested-session: send C-a
bind-key C-a send-prefix

# also enter copy mode while holding ctrl
bind-key C-[ copy-mode

#  vim-like visual mode  #
#------------------------#

# set vi mode
setw -g mode-keys vi

# vim like VISUAL mode
bind-key -T copy-mode-vi v   send-keys -X begin-selection
bind-key -T copy-mode-vi y   send-keys -X copy-selection
bind-key -T copy-mode-vi C-v send-keys -X rectangle-toggle

# vim paste
unbind-key p
bind-key p paste-buffer


# Cliboard interaction via xsel #
#-------------------------------#
# Note: doens't work for MacOS, and over ssh only if X11 forwarding is enabled

# turn off clipboard integration (doesn't work in GNOME terminal)
# FIXME: needs to be `on` for iTerm and `off` for GNOME terminal
set-option -s set-clipboard on

# CLIPBOARD -> 0, PRIMARY -> 1, and `choose-buffer`
bind-key C-p run "xsel -b -o | tmux load-buffer -b 0 - ; xsel -p -o | tmux load-buffer -b 1 -; tmux choose-buffer"

# CLTR+Y: choose-buffer => {CLIPBOARD and PRIMARY}
#bind-key C-y choose-buffer "run \"tmux save-buffer -b %% - | xsel -b -i; xsel -b -o | xsel -p -i\""

# Shift-y in copy mode copies straight to CLIBOARD
#bind-key -T copy-mode-vi Y send-keys -X copy-pipe-and-cancel "xsel -i -b"

# Yanking to MacOS via OSC 52.
# TODO: this needs to be done dynamically based on where we run and whether its
# remote or local
yank="~/bin/yank_osc52.sh"

bind -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "$yank"
bind -T copy-mode-vi y send-keys -X copy-pipe "$yank"
bind-key C-y choose-buffer "run \"tmux save-buffer -b %% - | $yank \""

#bind-key -T copy-mode-vi y 

# also update SSH_TTY
set -g update-environment \
  "DISPLAY\
  SSH_ASKPASS\
  SSH_AUTH_SOCK\
  SSH_AGENT_PID\
  SSH_CONNECTION\
  SSH_TTY\
  WINDOWID\
  XAUTHORITY"


#  vim-like  pane/window selection  #
#-----------------------------------#

# select panes using vim keys (and show panes after switching)
bind-key j   select-pane -D \; display-panes
bind-key C-j select-pane -D \; display-panes
bind-key k   select-pane -U \; display-panes
bind-key C-k select-pane -U \; display-panes
bind-key h   select-pane -L \; display-panes
bind-key C-h select-pane -L \; display-panes
bind-key l   select-pane -R \; display-panes
bind-key C-l select-pane -R \; display-panes

# new key-bindings for split windows
unbind-key %
bind-key | split-window -h
bind-key - split-window -v

# synchronize panes (type at the same time in all open panes in the window)
bind-key s   setw synchronize-panes
bind-key C-s setw synchronize-panes

# key combination for kill-window
bind-key K confirm-before -p "kill-window #W? (y/n)" kill-window

# dump all history to file
bind-key P command-prompt -p 'save history to filename:' -I '~/tmux.history' 'capture-pane -S -32768 ; save-buffer %1 ; delete-buffer'

# dump a chosen buffer to a file
#bind-key b command-prompt -p 'save chosen buffer to filename:' -I '~/tmux_buffer.txt' "choose-buffer \"save-buffer -b %% ";
bind-key b choose-buffer "save-buffer -b %% /tmp/tmux_%1"
#bind-key B choose-buffer "save-buffer -b %% /tmp/tmux_%1 ; run \"vim /tmp/tmux_%1\""

#######################
#  PASS-THROUGH mode  #
#######################
# create a "pass-through" mode for use in an outer tmux session.
# - activates a mostly empty key-table ('off')
# - passes through all keys except the pass-through-toggle key (currently F12).
# - puts the status bar to the top
# - PASSTHRU indicator, implemented below for `status-right`

bind-key -T root F12  \
  set prefix None \;\
  set key-table off \;\
  if -F '#{pane_in_mode}' 'send-keys -X cancel' \;\
  set status-position bottom \;\
  set status-left-style fg=white \;\
  set window-status-current-style fg=magenta \;\
  refresh-client -S

# turn off pass-through, reset options to their global default with `-u`.
bind-key -T off F12 \
  set -u prefix \;\
  set -u key-table \;\
  set -u status-position \;\
  set -u status-left-style \;\
  set -u window-status-current-style \;\
  refresh-client -S


############################
#  Visual and status line  #
############################

# powerline sybols used: 
# extra nerd-font symbols used:
#   hexagon:    
#   SSH icon:   
#   DISPLAY:    
#   no DISPLAY:ﴹ
#   CLIPBOARD:  

# Set status bar
set -g status-interval 10        # update every 10s (once a sec is too high CPU due to bash commands used)
set -g status-position bottom
set -g status-bg black
set -g status-fg white
set -g status-left-length 32
set -g status-right-length 60


#  Status line left   #
#---------------------#

# Status line left |session-name > pane-id >
set -g  status-left "#[fg=black,bg=yellow]  S: #S #[reverse]   "
#set -ga status-left "#[fg=yellow,bg=black] P: #P    "


#  Status line right  #
#---------------------#

set -g status-right "#[default]"

# SYNC indicator
set -ga status-right "#[fg=cyan,    bold]#{?pane_synchronized,#[reverse] SYNC ,}#[default]"
set -ga status-right "#[fg=color234,bold]#{?pane_synchronized,, SYNC }#[default]"

# ZOOM indicator
set -ga status-right "#[fg=green,   bold]#{?window_zoomed_flag,#[reverse] ZOOM ,}#[default]"
set -ga status-right "#[fg=color234,bold]#{?window_zoomed_flag,, ZOOM }#[default]"

# PASSTHRU indicator (checking key-table == off)
set -ga status-right "#[fg=magenta, bold]#{?#{==:#{client_key_table},off},#[reverse] PASSTHRU ,}#[default]"
set -ga status-right "#[fg=colour10,bold]#{?#{==:#{client_key_table},off},, PASSTHRU }#[default]"

# PREFIX indicator
set -ga status-right "#[fg=red,     bold]#{?client_prefix,#[reverse] PREFIX ,}#[default]"
set -ga status-right "#[fg=color234,bold]#{?client_prefix,, PREFIX }#[default]"

# COPY and SELECT mode indicator
# - detected via #{selection_present} which is:
#       - ""  if not copy-mode
#       - "0" if copy-mode and no selection
#       - "1" if copy-mode and selection
#       -> we don't need #{==:#{pane_mode},copy-mode} to detect copy-mode
set -ga status-right "#[fg=magenta,bold]#{?#{==:#{selection_present},1},#[reverse] SELECT ,}#[default]"
set -ga status-right "#[fg=yellow, bold]#{?#{==:#{selection_present},0},#[reverse]  COPY  ,}#[default]"
set -ga status-right "#[fg=yellow, bold]#{?#{==:#{selection_present},}, PANE #P ,}#[default]"

#  SSH and DISPLAY indicators
#  --------------------------
#
# Unfortunately tmux runs $(command) commands with the global environment but
# its `run 'command'` in the session environment.  Since we use `xsel` via
# `run` from within the session environment, we can't just directly access the
# environment variables in $() Instead, we have to specify the session in a
# tmux show-environement command.
#
# Through some grep magic, the following command will print 1 if a variable exists in the session env
# and 0 otherwise:
#   (tmux show-environment -t #S ENV_VAR 2>/dev/null | grep -v ^- 1>/dev/null && echo 1 || echo 0)

set -ga status-right "#[fg=colour8]#[bg=colour8,fg=white] "
# whether DISPLAY is set:  off: ﴹ
set -ga status-right "#{?#(tmux show-environment -t #S DISPLAY        2>/dev/null | grep -v ^- 1>/dev/null && echo 1 || echo 0),#[fg=black],#[fg=red]ﴹ} "
# whether session is through ssh: print 
set -ga status-right "#{?#(tmux show-environment -t #S SSH_CONNECTION 2>/dev/null | grep -v ^- 1>/dev/null && echo 1 || echo 0),#[fg=yellow] ,}"

# hostname
set -ga status-right "#[fg=white]#[bg=black]#[reverse] #h "


#  Window tabs  #
#---------------#

# the window tabs start at the left
set -g status-justify left

# window-tabs
set -g window-status-style fg=blue
set -g window-status-format " #I : #W "

# selected window-tab
set -g window-status-current-format " #I : #W #[reverse]"
set -g window-status-current-style fg=black,bg=blue,bold

# special highlighting of windows for certain events
set -g window-status-bell-style fg=red,bold
set -g window-status-activity-style fg=green,none

#  Pane borders  #
#----------------#

# style
set -g pane-border-status top
set -g pane-border-style "fg=color244,bg=black"   # grey on black
#set -g pane-active-border-style "fg=yellow,bg=black"
set -g pane-active-border-style "fg=blue,bg=black"

# Left pane status
set -g  pane-border-format "#{?pane_active,#[fg=blue],}#[reverse]  P[#P: #D] #[noreverse]"
set -ga pane-border-format "#[bg=color237]#[fg=default]"
set -ga pane-border-format " #{=/15/..:pane_current_command}  #[fg=color244]#{=/25/..:pane_title}#[fg=default] "
set -ga pane-border-format "#[bg=default,fg=color237]#[default]"

# TODO:
#   1) nested process names: .e.g.:   zsh  sudo  bash
#   2) customizable process info (for ssh): zsh  ssh [@ hostname] 
#   3) if multi-child: summarize: zsh  [4*python, 4*bash] 
#   4) deal with `tee` and piping: zsh  python | tee 
#  Start from here:
#set -ga pane-border-format "pid: #{pane_pid} "
#set -ga pane-border-format "cmd: #{pane_current_command} "
#set -ga pane-border-format "mode: #{pane_mode} "
#set -ga pane-border-format "mode: #{=/20/...:pane_path} "

# Right pane status
set -ga pane-border-format "#[align=right]"

# status indicators: Copy, Sync, Zoom
set -ga pane-border-format "#[fg=yellow,  bold]#{?#{==:#{pane_mode},copy-mode},#[reverse]C,}#[default]"
#set -ga pane-border-format "#[fg=color10, bold]#{?#{==:#{pane_mode},copy-mode},,C}#[default]"
set -ga pane-border-format "#[fg=cyan,   bold]#{?pane_synchronized,#[reverse]S,}#[default]"
#set -ga pane-border-format "#[fg=color10,bold]#{?pane_synchronized,,S}#[default]"
set -ga pane-border-format "#[fg=green,  bold]#{?window_zoomed_flag,#[reverse]Z,}#[default]"
#set -ga pane-border-format "#[fg=color10,bold]#{?window_zoomed_flag,,Z}#[default]"

# pane history size
set -ga pane-border-format "#[fg=color238]#[reverse,bg=color245] hist #[fg=color236] #{?#{e|>=:#{history_size},1000},#{e|/:#{history_size},1000}k,#{history_size}}L"
set -ga pane-border-format " (#{?#{e|>=:#{history_bytes},1000000},#{e|/:#{history_bytes},1000000}MB,#{?#{e|>=:#{history_bytes},1000},#{e|/:#{history_bytes},1000}kB,#{history_bytes}B}}) #[default]"


# Other Visuals #
#---------------#

# command-prompt and messages:
set -g message-style bg=black,fg=green
# command-mode (vi-edit in command-line)
set -g message-command-style bg=black,fg=red

